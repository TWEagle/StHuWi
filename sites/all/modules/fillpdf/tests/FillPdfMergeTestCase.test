<?php

/**
 * Tests that PDF population and token replacement works.
 */
class FillPdfMergeTestCase extends ImageFieldTestCase {

  use FillPdfTestHelper;

  protected $testNode;

  /**
   *
   */
  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'FillPDF (Merging)',
      'description' => 'Ensure that token and image replacement work.',
      'group' => 'FillPDF',
    );
  }

  /**
   *
   */
  public function setUp() {
    parent::setUp();

    // ImageFieldTestCase::setUp() is dumb, so we have to enable some modules
    // ourselves.
    $modules = array('fillpdf', 'fillpdf_test_webform', 'fillpdf_test');
    $success = module_enable($modules, TRUE);
    $this->assertTrue($success, t('Enabled modules: %modules', array('%modules' => implode(', ', $modules))));

    $this->createPrivilegedUser();
    $this->configureBackend();

    $existing_roles = array_keys($this->privilegedUser->roles);
    $granted_rid = end($existing_roles);
    user_role_change_permissions($granted_rid, array(
      'administer nodes' => TRUE,
      'access all webform results' => TRUE,
      'edit all webform submissions' => TRUE,
      'edit webform components' => TRUE,
    ));
  }

  /**
   *
   */
  public function testPdfMerging() {
    features_revert_module('fillpdf_test_webform');

    // Can we get to the Webform we created?
    $webform = webform_features_machine_name_load('fillpdf_test_webform');
    $this->assertTrue(property_exists($webform, 'nid'), 'Webform properly loaded from Features.');

    // @todo: continue imitating D8 version. Create an image field (and content
    // type, etc., if necessary).
    $this->createImageField('field_fillpdf_test_image', 'article');
    $files = $this->drupalGetTestFiles('image');
    $image = reset($files);

    // Clear cache and grant more permissions to ensure ability to create nodes.
    $existing_roles = array_keys($this->privilegedUser->roles);
    $granted_rid = end($existing_roles);
    user_role_change_permissions($granted_rid, array(
      'create webform content' => TRUE,
      'create article content' => TRUE,
    ));

    // @todo: Which user is actually logged in?
    $this->testNode = node_load($this->uploadNodeImage($image, 'field_fillpdf_test_image', 'article'));

    // Test with a node.
    $this->uploadTestPdf();
    $fillpdf_form = fillpdf_load($this->getLatestFillPdfForm());

    // Get the field definitions for the form that was created and configure
    // them.
    $fid = $fillpdf_form->fid;
    $fields = fillpdf_get_fields($fid);
    $this->mapFillPdfFieldsToNodeFields($fields, $fid);

    // Hit the FillPDF URL, check the results from the test fill method.
    $this->drupalGet('fillpdf', array(
      'query' => array(
        'fid' => $fid,
        'nid' => $this->testNode->nid,
      ),
    ));

    // We don't actually care about downloading the fake PDF. We just want to
    // check what happened in the backend.
    $merge_result = variable_get('fillpdf_test_last_merge_metadata');

    $this->assertEqual(
      $merge_result['fields']['TextField'],
      $this->testNode->title,
      'PDF is populated with the title of the node.'
    );

    $field_fillpdf_test_image = field_get_items('node', $this->testNode, 'field_fillpdf_test_image');
    $node_file = file_load($field_fillpdf_test_image[0]['fid']);
    $this->assertEqual(
      $merge_result['images']['ImageField']['data'],
      base64_encode(file_get_contents($node_file->uri)),
      'Encoded image matches known image.'
    );

    $path_info = pathinfo($node_file->uri);
    $expected_file_hash = md5($path_info['filename']) . '.' . $path_info['extension'];
    $this->assertEqual(
      $merge_result['images']['ImageField']['filenamehash'],
      $expected_file_hash,
      'Hashed filename matches known hash.'
    );

    $this->assertEqual(
      $merge_result['fields']['ImageField'],
      '{image}' . drupal_realpath($node_file->uri),
      'URI in metadata matches expected URI.'
    );

    // Test the legacy [stamp] pseudo-token.
    $legacy_fields = fillpdf_get_fields($fid);
    foreach ($legacy_fields as $legacy_pdf_key => $legacy_field) {
      switch ($legacy_pdf_key) {
        case 'ImageField':
          $legacy_field['value'] = '[stamp:field_fillpdf_test_image]';
          break;
      }
      fillpdf_fields_create_update($fid, $legacy_pdf_key, $legacy_field, TRUE);
    }
    // Hit the FillPDF URL, check the results from the test fill method.
    $this->drupalGet('fillpdf', array(
      'query' => array(
        'fid' => $fid,
        'nid' => $this->testNode->nid,
      ),
    ));
    // We don't actually care about downloading the fake PDF. We just want to
    // check what happened in the backend.
    $legacy_merge_result = variable_get('fillpdf_test_last_merge_metadata');

    $this->assertTrue($legacy_merge_result['flatten'], 'PDF is set to be flattened.');

    $this->assertEqual(
      $legacy_merge_result['images']['ImageField']['data'],
      base64_encode(file_get_contents($node_file->uri)),
      'Legacy: Encoded image matches known image.'
    );

    $this->assertEqual(
      $legacy_merge_result['images']['ImageField']['filenamehash'],
      $expected_file_hash,
      'Legacy: Hashed filename matches known hash.'
    );

    $this->assertEqual(
      $legacy_merge_result['fields']['ImageField'],
      '{image}' . drupal_realpath($node_file->uri),
      'Legacy: URI in metadata matches expected URI.'
    );

    // Test Webform image filling.
    $this->uploadTestPdf();
    $fillpdf_form2 = fillpdf_load($this->getLatestFillPdfForm());

    // Create a test submission for our test Webform.
    $this->drupalPost(
      "node/{$webform->nid}",
      array(
        'files[submitted_image_field]' => drupal_realpath($image->uri),
      ),
      t('Submit'));

    // Get the submission.
    $url_parts = drupal_parse_url($this->getUrl());
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submission = webform_get_submission($webform->nid, $url_parts['query']['sid']);

    // Get the field definitions for the form that was created and configure
    // them.
    $wf_fields = fillpdf_get_fields($fillpdf_form2->fid);
    foreach ($wf_fields as $wf_pdf_key => $wf_field) {
      switch ($wf_pdf_key) {
        case 'ImageField':
          $wf_field['value'] = '[submission:values:image_field]';
          break;

        case 'TextField':
          $wf_field['value'] = '[node:title]';
          break;
      }
      fillpdf_fields_create_update($fillpdf_form2->fid, $wf_pdf_key, $wf_field, TRUE);
    }

    // Hit the FillPDF URL, check the results from the test fill method.
    $this->drupalGet('fillpdf', array(
      'query' => array(
        'fid' => $fillpdf_form2->fid,
        'webforms[0][nid]' => $webform->nid,
        'webforms[0][sid]' => $submission->sid,
      ),
    ));
    // We don't actually care about downloading the fake PDF. We just want to
    // check what happened in the backend.
    $merge_result = variable_get('fillpdf_test_last_merge_metadata');

    $this->assertEqual(
      $merge_result['fields']['TextField'],
      $webform->title,
      'PDF is populated with the title of the Webform node.'
    );

    // Find the image_field component.
    $image_field_cid = NULL;
    foreach ($webform->webform['components'] as $cid => $component) {
      if ($component['form_key'] === 'image_field') {
        $image_field_cid = $cid;
        break;
      }
    }
    $webform_file = file_load($submission->data[$image_field_cid][0]);
    $this->assertEqual(
      $merge_result['images']['ImageField']['data'],
      base64_encode(file_get_contents($webform_file->uri)),
      'Encoded image matches known image.'
    );

    $path_info = pathinfo($webform_file->uri);
    $expected_file_hash = md5($path_info['filename']) . '.' . $path_info['extension'];
    $this->assertEqual(
      $merge_result['images']['ImageField']['filenamehash'],
      $expected_file_hash,
      'Hashed filename matches known hash.'
    );

    $this->assertEqual(
      $merge_result['fields']['ImageField'],
      '{image}' . drupal_realpath($webform_file->uri),
      'URI in metadata matches expected URI.'
    );
  }

  /**
   *
   */
  public function testLocalServicePdfMerging() {
    $this->configureLocalServiceBackend();
    if (!fillpdf_localservice_check()) {
      // We don't have access to the local service, so don't run any assertions.
      return;
    }

    // The testing UI doesn't clearly indicate that these tests are being run by
    // default because we delegate to backendTest(). This is a convenience
    // marker.
    $this->assertTrue(TRUE, 'FillPDF LocalServer detected. Running tests.');

    $this->backendTest();
  }

  /**
   *
   */
  protected function backendTest() {
    $this->uploadTestPdf();
    $fillpdf_form = fillpdf_load($this->getLatestFillPdfForm());

    // Get the field definitions for the form that was created and configure
    // them.
    $fields = fillpdf_get_fields($fillpdf_form->fid);

    $this->assertFalse(empty($fields), 'PDF contained actual fields.');

    $this->mapFillPdfFieldsToNodeFields($fields, $fillpdf_form->fid);

    // Hit the generation callback, and check the results from merging.
    $this->drupalGet('fillpdf', array(
      'query' => array(
        'fid' => $fillpdf_form->fid,
        'nid' => $this->testNode->nid,
      ),
    ));
    $maybe_pdf = $this->drupalGetContent();
    $finfo = new \finfo(FILEINFO_MIME_TYPE);
    $this->assertEqual('application/pdf', $finfo->buffer($maybe_pdf));
  }

  /**
   * @param $fields
   * @param $fid
   */
  protected function mapFillPdfFieldsToNodeFields($fields, $fid) {
    foreach ($fields as $pdf_key => $field) {
      switch ($pdf_key) {
        case 'ImageField':
          $field['value'] = '[node:field_fillpdf_test_image]';
          break;

        case 'TextField':
          $field['value'] = '[node:title]';
          break;
      }
      fillpdf_fields_create_update($fid, $pdf_key, $field, TRUE);
    }
  }

}
